pipeline {
    agent { label 'docker' }

    tools {
        maven 'maven'  // Must match the Maven name in Jenkins Global Tool Config
    }

    environment {
        DOCKER_IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Microservices') {
            parallel {
                stage('Product') {
                    steps {
                        dir('product-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Order') {
                    steps {
                        dir('order-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('User') {
                    steps {
                        dir('user-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
                stage('Gateway') {
                    steps {
                        dir('gateway-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Product Image') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.product -t flipkart/product-service .'
                        }
                    }
                }
                stage('Order Image') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.order -t flipkart/order-service .'
                        }
                    }
                }
                stage('User Image') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.user -t flipkart/user-service .'
                        }
                    }
                }
                stage('Gateway Image') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.gateway -t flipkart/gateway-service .'
                        }
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                // Stop and remove old containers if running
                sh '''
                docker rm -f product || true
                docker rm -f order || true
                docker rm -f user || true
                docker rm -f gateway || true
                '''

                // Run containers
                sh 'docker run -d --name product -p 8080:8080 flipkart/product-service:latest'
                sh 'docker run -d --name order -p 8081:8081 flipkart/order-service:latest'
                sh 'docker run -d --name user -p 8082:8082 flipkart/user-service:latest'
                sh 'docker run -d --name gateway -p 8083:8083 flipkart/gateway-service:latest'
            }
        }
    }

    post {
        success {
            echo 'üéâ All microservices built and deployed successfully!'
        }
        failure {
            echo '‚ùå Build or deployment failed. Check logs.'
        }
        always {
            echo 'üßπ Cleaning up unused Docker resources'
            sh 'docker system prune -f -a --volumes || true'
        }
    }
}
