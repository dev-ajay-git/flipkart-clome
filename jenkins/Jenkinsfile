pipeline {
    agent { label 'docker' }

    tools {
        maven 'maven'  // Make sure this name matches your Jenkins Maven config
    }

    environment {
        DOCKER_IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Microservices') {
            parallel {
                stage('Build Product Service') {
                    steps {
                        dir('product-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }

                stage('Build Order Service') {
                    steps {
                        dir('order-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }

                stage('Build User Service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }

                stage('Build Gateway Service') {
                    steps {
                        dir('gateway-service') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Dockerize Product Service') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.product -t flipkart/product-service .'
                        }
                    }
                }

                stage('Dockerize Order Service') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.order -t flipkart/order-service .'
                        }
                    }
                }

                stage('Dockerize User Service') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.user -t flipkart/user-service .'
                        }
                    }
                }

                stage('Dockerize Gateway Service') {
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.gateway -t flipkart/gateway-service .'
                        }
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                sh 'docker run -d -p 8080:8080 flipkart/product-service:latest'
                sh 'docker run -d -p 8081:8081 flipkart/order-service:latest'
                sh 'docker run -d -p 8082:8082 flipkart/user-service:latest'
                sh 'docker run -d -p 8083:8083 flipkart/gateway-service:latest'
            }
        }
    }

    post {
        success {
            echo 'üéâ Build and deployment completed successfully!'
        }

        failure {
            echo '‚ùå Build or deployment failed. Check logs.'
        }

        always {
            echo 'üßπ Cleaning up unused Docker resources...'
            sh 'docker system prune -f'
        }
    }
}
