pipeline {
    agent none  // No global agent, will define per stage

    environment {
        DOCKER_IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout') {
            agent any  // This runs on the master EC2 to checkout the code from GitHub
            steps {
                checkout scm  // Checkout the code from GitHub
            }
        }

        stage('Build & Test') {
            parallel {
                stage('Build Product Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('product-service') {
                            sh 'mvn clean package -DskipTests'  // Build the product service
                        }
                    }
                }

                stage('Build Order Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('order-service') {
                            sh 'mvn clean package -DskipTests'  // Build the order service
                        }
                    }
                }

                stage('Build User Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('user-service') {
                            sh 'mvn clean package -DskipTests'  // Build the user service
                        }
                    }
                }

                stage('Build Gateway Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('gateway-service') {
                            sh 'mvn clean package -DskipTests'  // Build the gateway service
                        }
                    }
                }
            }
        }

        stage('Dockerize') {
            parallel {
                stage('Docker Product Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.product -t flipkart/product-service .'
                        }
                    }
                }

                stage('Docker Order Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.order -t flipkart/order-service .'
                        }
                    }
                }

                stage('Docker User Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.user -t flipkart/user-service .'
                        }
                    }
                }

                stage('Docker Gateway Service') {
                    agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
                    steps {
                        dir('docker') {
                            sh 'docker build -f Dockerfile.gateway -t flipkart/gateway-service .'
                        }
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            agent { label 'docker' }  // This runs on the slave EC2 (docker-node)
            steps {
                // Run the docker containers locally on the slave EC2
                sh 'docker run -d -p 8080:8080 flipkart/product-service:latest'
                sh 'docker run -d -p 8081:8081 flipkart/order-service:latest'
                sh 'docker run -d -p 8082:8082 flipkart/user-service:latest'
                sh 'docker run -d -p 8083:8083 flipkart/gateway-service:latest'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images'
            sh 'docker system prune -f'  // Clean up unused Docker images
        }

        success {
            echo 'Build and deploy succeeded!'
        }

        failure {
            echo 'Build or deploy failed!'
        }
    }
}
